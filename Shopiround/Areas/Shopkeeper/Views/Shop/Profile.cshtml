@model ShopProfile
@{
    int i = 0;
}
<style>
    .productImage {
        height: 150px;
        width: 100%;
    }

    .productName {
        font-size: 14px;
        line-height: 14px;
        font-weight: 500;
    }

    .productPrice {
        font-size: 16px;
        line-height: 16px;
        font-weight: 700;
    }

    .shopInfo {
        font-size: 12px;
        line-height: 12px;
        font-weight: 400;
    }

    a {
        text-decoration: none;
        color: black;
    }

    .cat {
        height: 50px;
        width: 50px;
        border-radius: 50%;
    }
</style>

<form class="w-100 mx-auto" method="post" enctype="multipart/form-data">

    <div class="row">
        <div class="col-8">
            <div class="h1">
                Shop Information
            </div>
            <hr />
            <div class="mb-3">
                <div style="display: flex">
                    <h3>@Model.shop.ShopName</h3>
                </div>
            </div>
            <div class="mb-3">
                <div style="display: flex">
                    <div>Owner Name:</div>
                    <div>@Model.shop.OwnerName</div>
                </div>
            </div>
            <div class="mb-3">
                <div style="display: flex">
                    <div>Contact Number:</div>
                    <div>@Model.shop.ShopPhoneNo</div>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="card h-100 d-flex">
                <img id="output" src="@Model.shop.ImageURL" class="card-img-top h-75 w-75 mx-auto mt-3" alt="...">
            </div>
        </div>
    </div>
    <hr />
    <div class="h1">Shop Address</div>
    <div id="map" style="height: 200px;"></div>
    <div class="row ">
 @*        <div class="mb-2 col-4">
            @Model.shop.Division
        </div>
        <div class="mb-2 col-4">
            @Model.shop.District
        </div>
        <div class="mb-2 col-4">
            @Model.shop.Upazila
        </div> *@
        <div class="mb-2 col-12">
            @Model.shop.Address
        </div>
    </div>
    <hr />
    <div class="h1">Others</div>
    <div class="row">
        <div class="col-8">
            <div class="h5"><u>Openning Time : @Model.shop.OpeningTime </u></div>
            <div></div>
            
            <div class="h5"><u>Closing Time : @Model.shop.OpeningTime</u></div>
            
        </div>
        <div class="col-4">
            <div class="container border-start">
                <div class="h4"><u>Open Days</u></div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Saturday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Sunday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Monday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Tuesday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Wednesday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Thursday</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @(Model.shop.Saturday == true ? "checked disabled" : "disabled")>
                    <label class="form-check-label">Friday</label>
                </div>
                
            </div>
        </div>
    </div>
    

    <div class="h1">
        Products
    </div>
    <hr />
    <div class="row mt-2">
        @foreach (var item in Model.products)
        {
            string distanceId = "distance" + i.ToString();
            <div class="col-6 Search mt-2" data-product-id="@item.Id" data-product-name="@item.Name">
                <a href="@Url.Action("Show", "Product", new { area = "Shopkeeper",  Id = item.Id })">
                    <div class="border border-2 rounded-3 p-1">
                        <img class="productImage" src="@item.ImageURL" />
                    </div>
                    <div class="p-1">
                        <div class="productName mt-1">@item.Name</div>
                        <div class="productPrice mt-1">BDT @item.Price.00</div>
                        <div> <span id="@distanceId"></span></div>
                        <div></div>
                    </div>
                </a>
            </div>
            ++i;
        }
    </div>
</form>

<script>
    var lat, lng;
    var map = L.map('map');
    var marker;
    var latitudeInput = @Model.shop.Latitude;
    var longitudeInput = @Model.shop.Longitude;

    const toWaypoint = [latitudeInput, longitudeInput];

    marker = L.marker([latitudeInput, longitudeInput]).addTo(map);

    var latitudeValue, longitudeValue;
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    const myAPIKey = "a63091f5968a473c88c4c923004de755";

    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                lat = position.coords.latitude;
                lng = position.coords.longitude;
                console.log(`Latitude: ${lat}, longitude: ${lng}`);

                latitudeValue = lat;
                longitudeValue = lng;
                map.setView([lat, lng], 15);

                marker = L.marker([lat, lng]).addTo(map);

                const fromWaypoint = [lat, lng];

                fetch(`https://api.geoapify.com/v1/routing?waypoints=${fromWaypoint.join(',')}|${toWaypoint.join(',')}&mode=drive&apiKey=${myAPIKey}`).then(res => res.json()).then(result => {

                    // Note! GeoJSON uses [longitude, latutude] format for coordinates
                    L.geoJSON(result, {
                        style: (feature) => {
                            return {
                                color: "rgba(20, 137, 255, 0.7)",
                                weight: 5
                            };
                        }
                    }).bindPopup((layer) => {
                        return `${layer.feature.properties.distance} ${layer.feature.properties.distance_units}, ${layer.feature.properties.time}`
                    }).addTo(map);

                    // collect all transition positions
                    const turnByTurns = [];
                    result.features.forEach(feature => feature.properties.legs.forEach((leg, legIndex) => leg.steps.forEach(step => {
                        const pointFeature = {
                            "type": "Feature",
                            "geometry": {
                                "type": "Point",
                                "coordinates": feature.geometry.coordinates[legIndex][step.from_index]
                            },
                            "properties": {
                                "instruction": step.instruction.text
                            }
                        }
                        turnByTurns.push(pointFeature);
                    })));

                    L.geoJSON({
                        type: "FeatureCollection",
                        features: turnByTurns
                    }, {
                        pointToLayer: function (feature, latlng) {
                            return L.circleMarker(latlng, turnByTurnMarkerStyle);
                        }
                    }).bindPopup((layer) => {
                        return `${layer.feature.properties.instruction}`
                    }).addTo(map);

                }, error => console.log(err));
            },
            (error) => {
                //console.error("Error getting user location:", error);
            }
        );
    } else {
        //console.error("Geolocation is not supported by this browser.");
    }
</script>