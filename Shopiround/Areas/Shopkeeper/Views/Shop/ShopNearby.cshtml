@model IEnumerable<Shop>
@{
    int DistanceRange = 500000000;
}
<style>
    .productImage {
        height: 150px;
        width: 100%;
    }

    .productName {
        font-size: 14px;
        line-height: 14px;
        font-weight: 500;
    }

    .productPrice {
        font-size: 16px;
        line-height: 16px;
        font-weight: 700;
    }

    .shopInfo {
        font-size: 12px;
        line-height: 12px;
        font-weight: 400;
    }

    a {
        text-decoration: none;
        color: black;
    }

    .cat {
        height: 50px;
        width: 50px;
        border-radius: 50%;
    }
</style>
<div style="display: flex; justify-content: space-between;">
    <div class="mt-2" style="font-size: 1.4rem; float: right; font-weight: 600;"><img src="~/images/assets/shop.png" style="height: 30px" />Shops near you</div>
    <div style="display: flex" class="mt-3">
        <div class="form-check">
            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" value="5000" checked>
            <label class="form-check-label" for="flexRadioDefault1">
                5km
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" value="10000">
            <label class="form-check-label" for="flexRadioDefault1">
                10km
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" value="15000">
            <label class="form-check-label" for="flexRadioDefault1">
                15km
            </label>
        </div>
    </div>
</div>


<div class="clearfix"></div>
<div id="productsContainer"></div>
    </div>
<partial name="_Footer" />

<script>
    var products = @Html.Raw(Json.Serialize(Model));
    console.log(products);
    
    var productsContainer = document.getElementById("productsContainer");
    productsContainer.setAttribute("class", "row mt-2");
    var latitudeUser, longitudeUser;
    var latitudeShop, longitudeShop;
    var cnt = 0;

    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                latitudeUser = position.coords.latitude;
                longitudeUser = position.coords.longitude;
                for (idx in products) {
                    latitudeShop = products[idx]["latitude"];
                    longitudeShop = products[idx]["longitude"];
                    fetch(`https://api.geoapify.com/v1/routing?waypoints=${latitudeShop},${longitudeShop}|${latitudeUser},${longitudeUser}&mode=drive&apiKey=a63091f5968a473c88c4c923004de755`)
                        .then(response => response.json())
                        .then(result => {
                            var distanceMeter = result["features"][0]["properties"]["distance"];
                            var distance = distanceMeter;
                            var unit = "m";
                            if (distanceMeter >= 1000) {
                                distance = distanceMeter / 1000;
                                unit = "km";
                            }
                            if (distanceMeter <= @DistanceRange) {
                                pushProduct(cnt, distance, unit);
                            }
                            ++cnt;
                            console.log("j");
                        })
                        .catch(error => console.log('error', error));
                }
            },
            (error) => {
                console.error("Error getting user location:", error);
            }
        );
    } else {
        console.error("Geolocation is not supported by this browser.");
    }
    


    /*
     latitudeUser = 22.8373;
     longitudeUser = 89.5400;

     for (idx in products) {
         latitudeShop = products[idx]["shop"]["latitude"];
         longitudeShop = products[idx]["shop"]["longitude"];
         fetch(`https://api.geoapify.com/v1/routing?waypoints=${latitudeShop},${longitudeShop}|${latitudeUser},${longitudeUser}&mode=drive&apiKey=a63091f5968a473c88c4c923004de755`)
             .then(response => response.json())
             .then(result => {
                 var distanceMeter = result["features"][0]["properties"]["distance"];
                 var distance = distanceMeter;
                 var unit = "m";
                 if (distanceMeter >= 1000) {
                     distance = distanceMeter / 1000;
                     unit = "km";
                 }
                 if (distanceMeter <= 5000) {
                     pushProduct(cnt, distance, unit);
                 }
                 ++cnt;
             })
             .catch(error => console.log('error', error));
     }
     */



    function pushProduct(idx, distance, unit) {
        var imageContainer = document.createElement("div");
        imageContainer.setAttribute("class", "border border-2 rounded-3 p-1");

        var productLink = document.createElement("a");
        productLink.setAttribute("href", `/Shopkeeper/Shop/Profile/${products[idx]["shopId"]}`);

        var image = document.createElement("img");
        image.setAttribute("class", "productImage");
        image.setAttribute("src", products[idx]["imageURL"]);

        imageContainer.appendChild(image);

        var infoContainer = document.createElement("div");
        infoContainer.setAttribute("class", "p-1");

        var name = document.createElement("div");
        name.setAttribute("class", "productName mt-1");
        name.innerHTML = products[idx]["shopName"];

        var shop = document.createElement("div");
        shop.setAttribute("class", "shopInfo mt-1");
        shop.innerHTML = products[idx]["shopName"] + "(" + distance + unit + ")";

        infoContainer.appendChild(name);
        infoContainer.appendChild(shop);



        productLink.appendChild(imageContainer);
        productLink.appendChild(infoContainer);

        var productContainer = document.createElement("div");
        productContainer.setAttribute("class", "col-6 mt-2");

        productContainer.appendChild(productLink);

        productsContainer.appendChild(productContainer);
    }



    // Get all radio buttons with the name 'flexRadioDefault'
    let radioButtons = document.getElementsByName('flexRadioDefault');


    // Loop through each radio button and add an event listener
    radioButtons.forEach(function (radio) {
        radio.addEventListener('change', function () {
            if (this.checked) {
                DistanceRange = this.value;
                productsContainer.innerHTML = ''; // Clear existing products

                // Recalculate and display products
                for (let idx in products) {
                    latitudeShop = products[idx]["latitude"];
                    longitudeShop = products[idx]["longitude"];
                    fetch(`https://api.geoapify.com/v1/routing?waypoints=${latitudeShop},${longitudeShop}|${latitudeUser},${longitudeUser}&mode=drive&apiKey=a63091f5968a473c88c4c923004de755`)
                        .then(response => response.json())
                        .then(result => {
                            var distanceMeter = result["features"][0]["properties"]["distance"];
                            var distance = distanceMeter;
                            var unit = "m";
                            if (distanceMeter >= 1000) {
                                distance = distanceMeter / 1000;
                                unit = "km";
                            }
                            if (distanceMeter <= DistanceRange) {
                                pushProduct(idx, distance, unit);
                            }
                        })
                        .catch(error => console.log('error', error));
                }
            }
        });
    });

</script>

